#!/bin/bash

# This script supports the following 2 commands :
# 1) Create a basic initramfs based on the following tutorial :
# https://wiki.gentoo.org/wiki/Custom_Initramfs
# 2) List the content of an initramfs archive (compressed using cpio and gzip only)
# 
# For the creation script, the main binary applications installed are the one 
# provided by busybox (ls, mkdir, cp, mount, insmod...)
#
# This script only creates an initramfs archive, to use it the rest of the
# system has to be configured properly, meaning :
# 1) Having the kernel configured to enable initramfs (CONFIG_BLK_DEV_INITRD=y)
# 2) Having the kernel configured to use a standalone initramfs archive compressed in gzip format
# (General setup -> Initramfs source file(s) -> Support initial ramdisk/ramfs compressed using gzip)
# 3) For the busybox utilitary 'mdev' to work, having the kernel configured to enable uevent helper
# (CONFIG_UEVENT_HELPER=y or Device Drivers -> Generic Driver Options -> Support for uevent helper)
# 4) Configure grub to recognize the new initramfs file
#
# Requirements (package to be installed) :
# - tree (apt-get install tree)
# - busybox (apt-get install busybox)
#
# cpio and gzip are most of the time part of the base kernel binaries.
#
# Assumptions :
# For the initramfs creation command the rootfs is located on the
# /dev/sda1 device

# GLOBAL VARIABLES
SUCCESS=1
ERROR=-1

function print_usage () {
	echo "Usage:"
	echo "./initramfs_basictools {create}"
	echo "Creates an initramfs archive (gzip+cpio compressed) that mount the rootfs /dev/sda1"
	echo 
	echo "./initramfs_basictools {list} [file]"
	echo "List the content of an initramfs archive (assume compressed with gzip)"
}

# Find the dependencies of a binary and copy them in the archive tree
# To avoid the pain of detecting if it should be copied in lib, lib64, or usr directory
# all the dependencies are copied once in lib and linked in the other dir
# $1 is the path to the binary
function copy_dependencies () {
	ldd $1 | while read dep; do
		local dep_name=`echo $dep | cut -d" " -f1`
		local dep_path=`echo $dep | cut -d" " -f3`
		local path_to_copy=""

		if [ $dep == "not a dynamic executable" ]; then
			continue
		fi

		# linux-vdso is already provided by the kernel
		if [ $dep_name == "linux-vdso.so.1" ]; then
			continue
		elif [ -f $dep_name  ]; then
			path_to_copy=$dep_name
		else
			path_to_copy=$dep_path
		fi

		if [ -f "lib/`basename $path_to_copy`" ]; then
			continue
		fi

		echo "Copying `basename $path_to_copy`"
		cp $path_to_copy lib 
		ln -s "lib/`basename $path_to_copy`" lib64
		ln -s "lib/`basename $path_to_copy`" usr/lib
		ln -s "lib/`basename $path_to_copy`" usr/lib64
	done
}

# Create a basic initramfs archive with the device /dev/sda1 as rootfs
function create_initramfs () {
	local busybox="busybox"
	local switchroot="switch_root"
	local archive="initramfs-linux.img"

	local bins=($busybox $switchroot)
	local bb_bins=("mount" "umount" "mdev")

	# Create archive tree
	mkdir tmp && cd tmp
	mkdir --parents bin dev etc lib lib64 proc sbin sys new_root run usr/bin usr/lib usr/lib64

	# Install bin and dependencies
	echo "Installing bins and libs..."
	for bin in "${bins[@]}"; do
		local path=`whereis $bin | cut -d" " -f2`
		echo "Copying `basename $path`"
		cp $path bin
		ln -s "bin/`basename $path`" usr/bin
		copy_dependencies $path
	done

	# Install busybox symbolic link
	# See https://busybox.net/downloads/BusyBox.html for details
	for bin in "${bb_bins[@]}"; do
		echo "Create busybox symbolic link for $bin"
		ln -s busybox bin/$bin
	done

	# Create init script
	echo "Write init script"
	echo "#!/bin/busybox sh" >> init
	echo "mount -t proc none /proc" >> init
	echo "mount -t sysfs none /sys" >> init 
	echo "/sbin/mdev > /proc/sys/kernel/hotplug" >> init
	echo "mdev -s" >> init
	echo "mount /dev/sda1 /new_root" >> init
	echo "umount /proc" >> init
	echo "umount /sys" >> init
	echo "umount /dev" >> init
	echo "exec switch_root /new_root /sbin/init" >> init
	chmod +x init

	# Create archive
	echo "Creating final archive..."
	find . | cpio -o -H newc | gzip > ../$archive
	cd .. && rm -rf tmp
}

# Uncompress an initramfs archive in a temporary folder and list its content
# $1 is the file corresponding to the archive
function list_content () {
	if [ ! -r $1 ]; then
		echo "Error: File '$1' does not exist or is not readable"
		exit $ERROR
	fi

	file=`basename $1`
	mkdir tmp && cp $1 tmp/$file && cd tmp
	mv $file $file.gz && gunzip $file.gz
	cpio -i -d -H newc -F $file --no-absolute-filenames 
	rm $file 
	tree .
	cd .. && rm -rf tmp
}

if [ "$#" -lt 1 ]; then
	echo "Error, wrong number of argument"
	print_usage
	exit $ERROR
fi

command="$1"

if [ $command == "create" ]; then
	echo "Creating an initramfs archive..."
	create_initramfs
	exit $SUCCESS
elif [ $command == "list" ]; then
	if [ "$#" != 2 ]; then
		echo "Error: Expect exactly 1 initramfs file"
		print_usage
		exit $ERROR
	fi
	list_content $2
	exit $SUCCESS
fi

# Unknown command
echo "Error: Unknown command '$command'"
print_usage
exit $ERROR

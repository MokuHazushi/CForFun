#!/bin/bash

# This script supports the following 2 commands :
# 1) Create a basic initramfs based on the following tutorial :
# https://wiki.gentoo.org/wiki/Custom_Initramfs
# 2) List the content of an initramfs archive (compressed using cpio and gzip only)
# 
# For the creation script, the main binary applications installed are the one 
# provided by busybox (ls, mkdir, cp, mount, insmod...)
#
# This script only creates an initramfs archive, to use it the rest of the
# system has to be configured properly meaning :
# 1) Having the kernel configured to enable initramfs (CONFIG_BLK_DEV_INITRD=y)
# 2) Having the kernel configured to use a standalone initramfs archive compressed in gzip format
# (General setup -> Initramfs source file(s) -> Support initial ramdisk/ramfs compressed using gzip)
# 3) Configure grub to recognize the new initramfs file
#
# Requirements (package to be installed) :
# - tree (apt-get install tree)
# - busybox (apt-get install busybox)
#
# cpio and gzip are most of the time part of the base kernel binaries.
#
# Assumptions :
# For the initramfs creation command the init script assumes that the rootfs is located on the
# /dev/sda1 device

# GLOBAL VARIABLES
SUCCESS=1
ERROR=-1
LOCATE_ON=$(command -v locate)

function print_usage () {
	echo "Usage:"
	echo "./initramfs_basictools {create}"
	echo "Creates an initramfs archive (gzip+cpio compressed) that mount the rootfs /dev/sda1"
	echo 
	echo "./initramfs_basictools {list} [file]"
	echo "List the content of an initramfs archive (assume compressed with gzip)"
}

# Create a basic initramfs archive with the device /dev/sda1 as rootfs
function create_initramfs () {
	local bb_path
	local libc_path
	local linker_path
	local archive="initramfs-linux.img"


	# Find bin and libs
	bb_path=`whereis busybox | cut -d" " -f2`
	libc_path=`whereis libc.so.6 | cut -d" " -f2`
	linker_path=`whereis ld-linux-x86-64.so.2 | cut -d" " -f2`

	if [ `echo $bb_path | grep ":"` ]; then
		if [ ! -x $LOCATE_ON ]; then
			echo "Error: busybox binary not found"
			exit $ERROR
		fi
		bb_path=`locate busybox | head -n1`
	fi
	
	if [ `echo $libc_path | grep ":"` ]; then
		if [ ! -x $LOCATE_ON ]; then
			echo "Error: libc.so.6 not found"
			exit $ERROR
		fi
		libc_path=`locate libc.so.6 | head -n1`
	fi

	if [ `echo $linker_path | grep ":"` ]; then
		if [ ! -x $LOCATE_ON ]; then
			echo "Error: ld-linux-x86-64.so.2 not found"
			exit $ERROR
		fi
		local linker_path=`locate ld-linux-x86-64.so.2 | head -n1`
	fi

	mkdir tmp && cd tmp
	mkdir --parents bin dev etc lib lib64 proc sbin sys new_root run
	
	# Install busybox
	echo "Installing busybox"
	echo "Copying..."
	echo "`basename $bb_path`"
	cp $bb_path bin
	echo "`basename $libc_path`"
	cp $libc_path lib
	echo "`basename $linker_path`"
	cp $linker_path lib
	
	# Install symbolic link
	# See https://busybox.net/downloads/BusyBox.html for details
	ln -s bin/busybox bin/mount
	ln -s bin/busybox bin/umount

	# Create init script
	echo "Write init script"
	echo "#!/bin/busybox sh" >> init
	echo "mount -t proc none /proc" >> init
	echo "mount -t sysfs none /sys" >> init 
	echo "mount -t devtmpfs none /dev" >> init
	echo "umount /proc" >> init
	echo "umount /sys" >> init
	echo "umount /dev" >> init
	echo "exec switch_root /new_root /sbin/init" >> init
	chmod +x init

	# Create archive
	echo "Creating final archive..."
	find . | cpio -o -H newc | gzip > ../$archive
	cd .. && rm -rf tmp
}

# Uncompress an initramfs archive in a temporary folder and list its content
# $1 is the file corresponding to the archive
function list_content () {
	if [ ! -r $1 ]; then
		echo "Error: File '$1' does not exist or is not readable"
		exit $ERROR
	fi

	file=`basename $1`
	mkdir tmp && cp $1 tmp/$file && cd tmp
	mv $file $file.gz && gunzip $file.gz
	cpio -i -d -H newc -F $file --no-absolute-filenames 
	rm $file 
	tree .
	cd .. && rm -rf tmp
}

if [ "$#" -lt 1 ]; then
	echo "Error, wrong number of argument"
	print_usage
	exit $ERROR
fi

command="$1"

if [ $command == "create" ]; then
	echo "Creating an initramfs archive..."
	create_initramfs
	exit $SUCCESS
elif [ $command == "list" ]; then
	if [ "$#" != 2 ]; then
		echo "Error: Expect exactly 1 initramfs file"
		print_usage
		exit $ERROR
	fi
	list_content $2
	exit $SUCCESS
fi

# Unknown command
echo "Error: Unknown command '$command'"
print_usage
exit $ERROR
